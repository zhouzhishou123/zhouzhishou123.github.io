<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>旅途永无止境</title>
  <icon>https://www.gravatar.com/avatar/61e2a6cbc389b0741db62711eed4946c</icon>
  <subtitle>Talk is Cheep</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhouzhishou123.github.io/"/>
  <updated>2020-07-19T12:47:36.590Z</updated>
  <id>https://zhouzhishou123.github.io/</id>
  
  <author>
    <name>zhouzhishou</name>
    <email>zhouzhishou_123@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零搭建自己的React项目</title>
    <link href="https://zhouzhishou123.github.io/post/cca14a3f.html"/>
    <id>https://zhouzhishou123.github.io/post/cca14a3f.html</id>
    <published>2020-07-19T10:28:30.000Z</published>
    <updated>2020-07-19T12:47:36.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识地图"><a href="#知识地图" class="headerlink" title="知识地图"></a>知识地图</h2><blockquote><p>开始工作之前我们需要了解的知识点，以下链接可能某种原因无法访问，可查看对应的中文文档</p><ol><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a></li><li><a href="https://reactjs.org/" target="_blank" rel="noopener">React</a></li><li><a href="https://reactrouter.com/" target="_blank" rel="noopener">React-Router</a></li><li><a href="https://redux.js.org/" target="_blank" rel="noopener">Redux</a></li><li><a href="https://react-redux.js.org/" target="_blank" rel="noopener">React-Redux</a></li><li><a href="https://redux-saga.js.org/" target="_blank" rel="noopener">Redux-Saga</a></li><li><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">ant-design</a></li></ol></blockquote><h2 id="配置webpack遇到的问题"><a href="#配置webpack遇到的问题" class="headerlink" title="配置webpack遇到的问题"></a>配置webpack遇到的问题</h2><ol><li><p><a href="https://github.com/parcel-bundler/parcel/issues/1195" target="_blank" rel="noopener">issues1</a>: <a href="https://github.com/parcel-bundler/parcel/issues/1195" target="_blank" rel="noopener">https://github.com/parcel-bundler/parcel/issues/1195</a></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## solution  </span></span><br><span class="line"><span class="attr">loader:</span> <span class="string">'less-loader'</span><span class="string">,</span></span><br><span class="line"><span class="attr">options:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    lessOptions:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        javascriptEnabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><a href="https://github.com/ant-design/ant-design/issues/3442" target="_blank" rel="noopener">issues2</a>：<a href="https://github.com/ant-design/ant-design/issues/3442" target="_blank" rel="noopener">https://github.com/ant-design/ant-design/issues/3442</a></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">开启css-modules预编译时将第三方包排除</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">    test:</span> <span class="string">/\.less$/,</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">[</span></span><br><span class="line">        <span class="string">isPro</span> <span class="string">?</span> <span class="string">MiniCssExtractPlugin.loader</span> <span class="string">:</span> <span class="string">"style-loader"</span><span class="string">,</span></span><br><span class="line">        <span class="string">&#123;</span></span><br><span class="line"><span class="attr">            loader:</span> <span class="string">'css-loader'</span><span class="string">,</span></span><br><span class="line"><span class="attr">            options:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">                sourceMap:</span> <span class="type">!isPro</span></span><br><span class="line">            <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;,</span></span><br><span class="line">        <span class="string">'postcss-loader'</span><span class="string">,</span></span><br><span class="line">        <span class="string">&#123;</span></span><br><span class="line"><span class="attr">            loader:</span> <span class="string">'less-loader'</span><span class="string">,</span></span><br><span class="line"><span class="attr">            options:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">                lessOptions:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">                    javascriptEnabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="string">&#125;</span></span><br><span class="line">            <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line"><span class="attr">    exclude:</span> <span class="string">[</span></span><br><span class="line">        <span class="string">/node_modules/</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">     test:</span> <span class="string">/\.less$/,</span></span><br><span class="line"><span class="attr">     use:</span> <span class="string">[</span></span><br><span class="line">         <span class="string">isPro</span> <span class="string">?</span> <span class="string">MiniCssExtractPlugin.loader</span> <span class="string">:</span> <span class="string">"style-loader"</span><span class="string">,</span></span><br><span class="line">         <span class="string">&#123;</span></span><br><span class="line"><span class="attr">             loader:</span> <span class="string">'css-loader'</span><span class="string">,</span></span><br><span class="line"><span class="attr">             options:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">                 sourceMap:</span> <span class="type">!isPro</span></span><br><span class="line">             <span class="string">&#125;</span></span><br><span class="line">         <span class="string">&#125;,</span></span><br><span class="line">         <span class="string">'postcss-loader'</span><span class="string">,</span></span><br><span class="line">         <span class="string">&#123;</span></span><br><span class="line"><span class="attr">             loader:</span> <span class="string">'less-loader'</span><span class="string">,</span></span><br><span class="line"><span class="attr">             options:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">                 lessOptions:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">                     javascriptEnabled:</span> <span class="literal">true</span></span><br><span class="line">                 <span class="string">&#125;</span></span><br><span class="line">             <span class="string">&#125;</span></span><br><span class="line">         <span class="string">&#125;</span></span><br><span class="line">     <span class="string">],</span></span><br><span class="line"><span class="attr">     include:</span> <span class="string">[</span></span><br><span class="line">         <span class="string">/node_modules/</span></span><br><span class="line">     <span class="string">]</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="引入redux-react-redux-redux-saga"><a href="#引入redux-react-redux-redux-saga" class="headerlink" title="引入redux react-redux redux-saga"></a>引入redux react-redux redux-saga</h2><p> 入口文件main.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./src/store'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./src/App'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123; store &#125;&gt;</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=<span class="string">"/"</span>&gt;计数器&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>li&gt;</span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Route exact path="/</span><span class="string">" children=&#123;&lt;Counter /&gt;&#125; /&gt;</span></span><br><span class="line"><span class="string">            &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    &lt;/Provider&gt;, document.getElementById( 'root' )</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure></p><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">"../reducers"</span>;</span><br><span class="line"><span class="keyword">import</span> rootSaga <span class="keyword">from</span> <span class="string">'../sagas/rootSaga'</span>;</span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="keyword">const</span> store = createStore( rootReducer, applyMiddleware( sagaMiddleware ) );</span><br><span class="line">sagaMiddleware.run( rootSaga );</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>reducers/rootReduce.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers( &#123;</span><br><span class="line">    counter</span><br><span class="line">&#125; );</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure></p><p>reducers/counter.js</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const initState = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    chartName: '初始化的数据'</span><br><span class="line">&#125;;</span><br><span class="line">export <span class="keyword">default</span> function counter ( <span class="keyword">state</span> = initState, action ) &#123;</span><br><span class="line">    switch ( action.type ) &#123;</span><br><span class="line">        case <span class="string">"INCREMENT"</span>:</span><br><span class="line">            return &#123; ...<span class="keyword">state</span>, count: <span class="keyword">state</span>.count + <span class="number">1</span> &#125;;</span><br><span class="line">        case <span class="string">"DECREMENT"</span>:</span><br><span class="line">            return &#123; ...<span class="keyword">state</span>, count: <span class="keyword">state</span>.count - <span class="number">1</span> &#125;;</span><br><span class="line">        case <span class="string">"SAVE"</span>:</span><br><span class="line">            return &#123; ...<span class="keyword">state</span>, ...action.payload &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            return <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> saga.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; all, call, takeEvery, put &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getLists &#125; <span class="keyword">from</span> <span class="string">'@/Apis/counter'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getList</span> (<span class="params"> &#123; payload &#125; </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; chartName &#125; &#125; = <span class="keyword">yield</span> call( getLists, payload );</span><br><span class="line">    <span class="keyword">yield</span> put( &#123;</span><br><span class="line">        type: <span class="string">'SAVE'</span>,</span><br><span class="line">        payload: &#123; chartName &#125;</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">watchGetList</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> takeEvery( <span class="string">'GET_LIST'</span>, getList );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">rootSaga</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> all( [</span><br><span class="line">        watchGetList()</span><br><span class="line">    ] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootSaga;</span><br></pre></td></tr></table></figure></p><p>apis/counters.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLists</span> (<span class="params"> query </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request( &#123;</span><br><span class="line">        url: <span class="string">'/v1/bpi/currentprice.json'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        params: query</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>counter.jsx<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Table, Tag, Space &#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">"./app.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleIncrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.dispatch( &#123;</span><br><span class="line">            type: <span class="string">"INCREMENT"</span>,</span><br><span class="line">            payload: <span class="number">0</span>,</span><br><span class="line">        &#125; );</span><br><span class="line">    &#125;;</span><br><span class="line">    handleDecrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.dispatch( &#123;</span><br><span class="line">            type: <span class="string">"DECREMENT"</span>,</span><br><span class="line">            payload: <span class="number">0</span>,</span><br><span class="line">        &#125; );</span><br><span class="line">    &#125;;</span><br><span class="line">    handleGetList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.dispatch( &#123;</span><br><span class="line">            type: <span class="string">"GET_LIST"</span></span><br><span class="line">        &#125; );</span><br><span class="line">    &#125;;</span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            counter: &#123; count, chartName &#125;,</span><br><span class="line">        &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123;&#123; <span class="attr">textAlign</span>: <span class="string">"center"</span>, <span class="attr">marginTop</span>: <span class="string">"100px"</span> &#125;&#125;&gt;</span><br><span class="line">                &lt;h1&gt;&#123;chartName&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1 className=&#123;styles.center&#125;&gt;计数器：&#123;count&#125;&lt;/</span>h1&gt;</span><br><span class="line">                &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.handleIncrement&#125;&gt;</span><br><span class="line">                    +</span><br><span class="line">                &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Button type="primary" onClick=&#123;this.handleDecrement&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    -</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Button&gt;</span><br><span class="line">                &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.handleGetList&#125;&gt;</span><br><span class="line">                    更新视图</span><br><span class="line">                &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params"> state </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        counter: state.counter,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect( mapStateToProps )( Counter );</span><br></pre></td></tr></table></figure></p><h2 id="demo截图"><a href="#demo截图" class="headerlink" title="demo截图"></a>demo截图</h2><blockquote><p>点击按钮+递增、点击按钮-递减、点击按钮更新视图替换初始化数据。接口地址 <a href="https://api.coindesk.com/v1/bpi/currentprice.json" target="_blank" rel="noopener">https://api.coindesk.com/v1/bpi/currentprice.json</a><br><img src="/images/demo1.jpg" alt="avatar"></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文将记录如何使用webpack4搭建React项目并集成React-Router、Redux、React-Redux、Redux-Saga、antd。以及遇到的问题以及如何解决。
    
    </summary>
    
      <category term="React" scheme="https://zhouzhishou123.github.io/categories/React/"/>
    
    
      <category term="JS基础笔记" scheme="https://zhouzhishou123.github.io/tags/JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>变换莫测的this</title>
    <link href="https://zhouzhishou123.github.io/post/c8159d62.html"/>
    <id>https://zhouzhishou123.github.io/post/c8159d62.html</id>
    <published>2020-07-07T16:00:00.000Z</published>
    <updated>2020-07-08T15:17:02.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要用this"><a href="#为什么要用this" class="headerlink" title="为什么要用this"></a>为什么要用this</h2><blockquote><p>我们为什么要用this以及在哪种场景会用到this?下面可以通过一个例子说明。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用this的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Tom = &#123; <span class="attr">name</span>: <span class="string">"Tom"</span> &#125;,</span><br><span class="line">    Jerry = &#123; <span class="attr">name</span>: <span class="string">"Jerry"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> greeting = <span class="string">"Hello, I am "</span> + identify.call(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(identify.call(Tom)); <span class="comment">// TOM</span></span><br><span class="line"><span class="built_in">console</span>.log(identify.call(Jerry)); <span class="comment">// JERRY</span></span><br><span class="line">speak.call(Tom); <span class="comment">// Hello, I am TOM</span></span><br><span class="line">speak.call(Jerry); <span class="comment">// Hello, I am JERRY</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用this的情况</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context.name.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> greeting = <span class="string">"Hello, I am "</span> + identify(context);</span><br><span class="line">    <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">identify(Tom); <span class="comment">// TOM</span></span><br><span class="line">speak(Jerry) <span class="comment">// Hello, I am JERRY</span></span><br></pre></td></tr></table></figure><blockquote><p>通过上面的代码我们不难发现，如果不使用this,就需要给identify()和speak()显式传入一个上下文对象，随着你的使用模式越来越复杂，显式传递上下文会让代码变得越来越混乱，可见this提供了一种更优雅的方式来隐式”传递”一个对象的引用，因此可以将API设计得更加简洁并且易于复用。</p></blockquote><h2 id="关于this的两个常见误区"><a href="#关于this的两个常见误区" class="headerlink" title="关于this的两个常见误区"></a>关于this的两个常见误区</h2><ul><li>指向自身(举个🌰) <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callCount</span><span class="params">()</span> &#123;</span></span><br><span class="line">    this.count++;</span><br><span class="line">&#125;</span><br><span class="line">callCount.count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (let <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;<span class="number">10</span>;<span class="built_in">i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">i</span>&gt;<span class="number">5</span>)&#123;</span><br><span class="line">        callCount()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>不难发现callCount()会被调用四次但是callCount.count = 0，原因在于此时的this指向window,那么我们很容易联想到window.count = 4,但是结果是NaN。因为在非严格模式下count会提前声明使用，值为undefined,进行数字运算时得出结果NaN(数据类型的全面解析这篇文章有详细介绍数据之间的转换规则)</p><ul><li>指向他的作用域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.bar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>代码执行时，浏览器会创建一个全局的执行上下文(EC(G))，进入执行环境栈(ECS)中执行，执行过程中会进行变量和函数提升，变量对象(VO)存储当前上下文变量和值，形成私有作用域(scope)和作用域链(scope chain)，函数执行时，会形成一个全新的执行上下文,进入执行环境栈(ECS)中执行，活动对象(AO)存储函数内的形参、变量和值，同样会形成私有作用域和作用域链。此时的this并不是foo执行上下文下的作用域而是执行window。</p></blockquote><h2 id="如何确定this"><a href="#如何确定this" class="headerlink" title="如何确定this"></a>如何确定this</h2><ul><li><strong>this是在调用时进行绑定的，并不是在声明时确定的，this的绑定和函数声明的位置没有任何关系，完全取决于函数的调用方式。</strong></li></ul><ol><li>默认绑定<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo; <span class="comment">// 可以看作是foo的引用放入了全局ECS执行。this指向window</span></span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line">bar(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 作为回调函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"global"</span>;</span><br><span class="line"></span><br><span class="line">doFoo(obj.foo); <span class="comment">// "global" 是一样的跟bar()执行原理</span></span><br><span class="line">setTimeout(obj.foo, <span class="number">100</span>); <span class="comment">// "global" 跟bar()执行原理</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在非严格模式下this指向window，严格模式下this会绑定到undefined</p></blockquote><ol start="2"><li><p>隐式绑定 </p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    a: 42,</span></span><br><span class="line"><span class="comment">    foo: foo</span></span><br><span class="line"><span class="comment">&#125;</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    a:2,</span></span><br><span class="line"><span class="comment">    obj2</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line">obj2.foo(); <span class="comment">// 42 this指向obj2</span></span><br><span class="line"></span><br><span class="line">obj1.obj2.foo(); <span class="comment">// 42 this指向obj2</span></span><br></pre></td></tr></table></figure></li><li><p>显式绑定</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(this.a);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">obj</span> = <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    a: 2</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span>.<span class="title">call</span><span class="params">(obj)</span> <span class="comment">// 2</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span>.<span class="title">apply</span><span class="params">(obj)</span> <span class="comment">// 2</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span>.<span class="title">bind</span><span class="params">(obj)</span><span class="params">()</span> <span class="comment">// 2</span></span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>一旦被bind、call、apply绑定后不可能再修改它的this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(<span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p></blockquote><ol start="4"><li><p>构造函数里的this</p><blockquote><p>使用new来调用构造函数和直接调用普通函数的区别</p><ol><li>创建（构造）一个全新的对象作为实例对象</li><li>将这个新对象的__proto__指向构造函数的prototype对象</li><li>这个新对象会绑定到函数调用的this</li><li>执行函数中的代码</li><li>如果函数没有返回其他对象，那么函数执行完成后会自动返回这个新对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> Foo(<span class="string">"Tom"</span>); <span class="comment">// this就是bar这个实例对象</span></span><br></pre></td></tr></table></figure></li></ol></blockquote></li><li><p>箭头函数中的this</p><blockquote><p>箭头函数和普通函数的区别</p><ol><li>箭头函数没有自己的this,而是定义时上级执行上下文中</li><li>本身没有arguments对象,也没有prototype对象</li><li>不能当作构造函数使用</li><li>箭头函数的this绑定后无法被call、apply、bind、new修改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj) <span class="comment">// 箭头函数this是foo里的this</span></span><br></pre></td></tr></table></figure></li></ol></blockquote></li><li><p>事件绑定</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="comment">// this指向当前元素本身</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;) <span class="comment">// this指向当前元素本身</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      this关键字是javascript中最复杂的机制之一,对于有经验的javascript开发者来说都是一种非常复杂的机制
    
    </summary>
    
      <category term="javascript" scheme="https://zhouzhishou123.github.io/categories/javascript/"/>
    
    
      <category term="JS基础笔记" scheme="https://zhouzhishou123.github.io/tags/JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
